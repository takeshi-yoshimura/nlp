package ac.keio.sslab.nlp;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;

import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;

import ac.keio.sslab.clustering.bottomup.BottomupClassifier;
import ac.keio.sslab.clustering.bottomup.PointDumper;
import ac.keio.sslab.utils.SimpleGitReader;

public class PatchClusterJob implements NLPJob {

	@Override
	public String getJobName() {
		return "patchCluster";
	}

	@Override
	public String getJobDescription() {
		return "show similar patches for a patch";
	}

	@Override
	public Options getOptions() {
		OptionGroup g = new OptionGroup();
		g.addOption(new Option("b", "bottomupID", true, "ID for a bottomup job"));
		OptionGroup g5 = new OptionGroup();
		g5.addOption(new Option("g", "gitDir", true, "git directory"));
		OptionGroup g6 = new OptionGroup();
		g6.addOption(new Option("c", "corpusID", true, "ID for corpus job"));
		g.setRequired(true);
		g5.setRequired(true);
		g6.setRequired(true);

		Options opt = new Options();
		opt.addOption("p", "patchID", true, "patch ID in idIndex generated by corpus job");
		opt.addOption("s", "sha", true, "commit sha");
		opt.addOptionGroup(g);
		opt.addOptionGroup(g5);
		opt.addOptionGroup(g6);
		return opt;
	}

	@Override
	public void run(JobManager mgr) {
		NLPConf conf = NLPConf.getInstance();
		File gitDir = new File(mgr.getArgStr("g"));
		File classDir = new File(conf.finalOutputFile, "patchCluster/" + mgr.getArgStr("j"));
		int patchID = mgr.getArgOrDefault("p", -1, Integer.class);
		String sha = mgr.getArgOrDefault("s", null, String.class);
		String corpusID = mgr.getArgOrDefault("c", null, String.class);
		String bottomupID = mgr.getArgOrDefault("b", null, String.class);
		if ((patchID == -1 && sha == null) || (patchID != -1 && sha != null)) {
			System.err.println("Specify either -p or -s");
			return;
		} else if (sha != null && corpusID == null) {
			System.err.println("Specify -c if you use -c");
			return;
		}

		try {
			if (sha != null) {
				File idIndex = new File(conf.localCorpusFile, corpusID + "/idIndex.txt");
				BufferedReader br = new BufferedReader(new FileReader(idIndex));
				String line = null;
				boolean found = false;
				while ((line = br.readLine()) != null) {
					if (!line.contains(sha)) {
						continue;
					}
					patchID = Integer.parseInt(line.split("\t")[0]);
					found = true;
					break;
				}
				br.close();
				if (!found) {
					System.err.println("Could not find sha " + sha + " in " + idIndex.getAbsolutePath());
					return;
				}
				System.out.println("Use patchID = " + patchID + " for " + sha);
			}

			SimpleGitReader git = new SimpleGitReader(gitDir);
			PointDumper p = PointDumper.readJson(classDir, patchID);
			if (p == null) {
				System.out.println("Seems like we could not find the file for " + patchID + " in " + classDir.getAbsolutePath());
				System.out.println("Extract clusters for the patch. wait a moment...");
				File clustersFile = new File(conf.localBottomupFile, bottomupID + "/clusters.csv");
				File corpusIDIndexFile = new File(conf.localBottomupFile, bottomupID + "/corpusIDIndex.csv");
				File idIndexFile = new File(conf.localCorpusFile, corpusID + "/idIndex.txt");
				BottomupClassifier c = new BottomupClassifier(clustersFile, corpusIDIndexFile, idIndexFile, gitDir);
				if (!c.getPointIDs().contains(patchID)) {
					System.err.println("Invalid patch ID: " + patchID);
					return;
				}
				c.writeBestClusterJson(classDir, patchID);
				System.out.println("Finished! Retry read json for " + patchID);
				p = PointDumper.readJson(classDir, patchID);
			}
			File output = new File(conf.finalOutputFile, "patchCluster/" + mgr.getArgStr("j") + ".txt");
			PrintWriter pw = JobUtils.getPrintWriter(output);
			pw.println(p.toPlainText());
			pw.println(p.getClusterMetrics().toPlainText(git));
			pw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean runInBackground() {
		return false;
	}

}

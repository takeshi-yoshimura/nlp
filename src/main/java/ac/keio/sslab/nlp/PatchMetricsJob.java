package ac.keio.sslab.nlp;

import java.io.File;

import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;

import ac.keio.sslab.clustering.bottomup.PointCentricClusterReader;

public class PatchMetricsJob implements NLPJob {

	@Override
	public String getJobName() {
		return "classFullInfo";
	}

	@Override
	public String getJobDescription() {
		return "print full metrics for a patch to standard output";
	}

	@Override
	public Options getOptions() {
		OptionGroup g = new OptionGroup();
		g.addOption(new Option("cls", "classificationID", true, "ID for a classification job"));
		OptionGroup g5 = new OptionGroup();
		g5.addOption(new Option("g", "gitDir", true, "git directory"));
		OptionGroup g6 = new OptionGroup();
		g6.addOption(new Option("p", "patchID", true, "patch ID in idIndex generated by corpus job"));
		g.setRequired(true);
		g5.setRequired(true);
		g6.setRequired(true);

		Options opt = new Options();
		opt.addOptionGroup(g);
		opt.addOptionGroup(g5);
		opt.addOptionGroup(g6);
		return opt;
	}

	@Override
	public void run(JobManager mgr) {
		NLPConf conf = NLPConf.getInstance();
		File gitDir = new File(mgr.getArgStr("g"));
		File summaryFile = new File(conf.finalOutputFile, "class/" + mgr.getArgStr("cls"));

		try {
			PointCentricClusterReader c = new PointCentricClusterReader(summaryFile, gitDir);
			c.getFullInfo(Integer.parseInt(mgr.getArgStr("p")), System.out);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean runInBackground() {
		return false;
	}

}

package ac.keio.sslab.clustering.bottomup;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;

import ac.keio.sslab.clustering.view.ClusterGraph;
import ac.keio.sslab.clustering.view.HierarchicalCluster;
import ac.keio.sslab.clustering.view.IncrementalClusterDumper;
import ac.keio.sslab.clustering.view.PatchIDResolver;
import ac.keio.sslab.clustering.view.PointDumper;
import ac.keio.sslab.nlp.JobUtils;
import ac.keio.sslab.utils.SimpleGitReader;

public class BottomupClassifier {

	Map<Integer, HierarchicalCluster> singletons;
	Map<Integer, Map<String, Double>> pointTopics;
	SimpleGitReader git;
	Map<Integer, List<String>> pointIDs;
	Map<String, String> versions;
	File corpusIDIndexFile, idIndexFile;

	public BottomupClassifier(File clustersFile, File corpusIDIndexFile, File idIndexFile, File gitDir) throws IOException {
		List<HierarchicalCluster> singletons = ClusterGraph.parseResult(clustersFile).getSingletons();
		this.pointTopics = new HashMap<Integer, Map<String, Double>>();
		this.singletons = new HashMap<Integer, HierarchicalCluster>();
		for (HierarchicalCluster singleton: singletons) {
			this.singletons.put(singleton.getPoints().get(0), singleton);
			this.pointTopics.put(singleton.getPoints().get(0), singleton.getCentroid());
		}
		pointIDs = new PatchIDResolver(idIndexFile, corpusIDIndexFile).getPointIDtoPatchIDs();
		git = new SimpleGitReader(gitDir);
		versions = new HashMap<>();
		BufferedReader br = new BufferedReader(new FileReader(new File(idIndexFile.getParentFile(), "commits.txt")));
		String line = null;
		while ((line = br.readLine()) != null) {
			String [] s = line.split(",");
			versions.put(s[0], s[2]);
		}
		br.close();
	}

	public Set<Integer> getPointIDs() {
		return singletons.keySet();
	}

	public void writeAllDensityTrendCSV(File output) throws IOException {
		PrintWriter writer = JobUtils.getPrintWriter(output);
		StringBuilder sb = new StringBuilder();
		StringBuilder sb2 = new StringBuilder();
		for (Entry<Integer, HierarchicalCluster> c: singletons.entrySet()) {
			TreeMap<Integer, Double> trend = getDensityTrend(c.getKey());
			sb.setLength(0);
			sb2.setLength(0);
			sb.append("#Key=").append(c.getKey()).append('\n');
			for (Entry<Integer, Double> e: trend.entrySet()) {
				sb.append(e.getKey()).append(',');
				sb2.append(e.getValue()).append(',');
			}
			sb.setLength(sb.length() - 1);
			sb2.setLength(sb2.length() - 1);
			writer.println(sb.toString());
			writer.println(sb2.toString());
			writer.flush();
		}
		writer.close();
	}

	public TreeMap<Integer, Double> getDensityTrend(int pointID) {
		TreeMap<Integer, Double> trend = new TreeMap<Integer, Double>();
		HierarchicalCluster current = singletons.get(pointID);
		while (current != null) {
			trend.put(current.size(), current.getDensity());
			current = current.getParent();
		}
		return trend;
	}

	// pointID == ID generated by bottomup job
	public void writeBestClusterJson(File outputDir, int pointID) throws Exception {
		String subject = git.getSubject(pointIDs.get(pointID).get(0));
		List<String> shas = pointIDs.get(pointID);
		Set<String> fileSet = new HashSet<String>();
		List<Date> dates = new ArrayList<Date>();
		List<String> versions = new ArrayList<String>();
		for (String sha: shas) {
			dates.add(git.getCommitDate(sha));
			versions.add(this.versions.get(sha));
			fileSet.addAll(git.getFiles(sha));
		}
		List<String> files = new ArrayList<String>(fileSet);
		Map<String, Double> topic = singletons.get(pointID).getCentroid();
		List<HierarchicalCluster> all = getBestCluster(pointID);
		IncrementalClusterDumper c = new IncrementalClusterDumper(all, pointTopics, pointIDs, git);
		new PointDumper(pointID, subject, dates, versions, shas, files, topic, c).writeJson(outputDir);
	}

	public List<HierarchicalCluster> getBestCluster(int pointID) {
		TreeMap<Integer, HierarchicalCluster> scores = new TreeMap<Integer, HierarchicalCluster>();
		HierarchicalCluster current = singletons.get(pointID);
		HierarchicalCluster parent = current.getParent();

		while (current != null && parent != null) {
			scores.put(parent.size() - current.size(), current);
			current = parent;
			parent = parent.getParent();
		}
		HierarchicalCluster best = scores.lastEntry().getValue();

		List<HierarchicalCluster> all = new ArrayList<HierarchicalCluster>();
		current = singletons.get(pointID);
		parent = current.getParent();
		while (current != null && parent != null && current != best) {
			all.add(current);
			current = parent;
			parent = parent.getParent();
		}
		all.add(best);

		return all;
	}
}
